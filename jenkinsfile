pipeline {
    agent any

    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/PrabaSeenu/DevOps_webApp_host.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=webapp \
                    -Dsonar.projectKey=webapp
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('OWASP FS Scan') {
            steps {
                withEnv(["NVD_API_KEY=${credentials('nvd-api-key')}"]) {  
                    dependencyCheck additionalArguments: '''
                        --scan ./ 
                        --disableYarnAudit 
                        --disableNodeAudit 
                        --nvdApiKey=$NVD_API_KEY 
                        --cveValidForHours 48 
                        --data /var/lib/dependency-check
                    ''', odcInstallation: 'DP-Check'
                }
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }

        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-creds', toolName: 'docker') {   
                        sh 'docker build -t webapp .'
                        sh 'docker tag webapp prabaseenu/webapp:latest'
                        sh 'docker push prabaseenu/webapp:latest'
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image prabaseenu/webapp:latest > trivy.txt'
            }
        }

        stage('Deploy to Container') {
            steps {
                sh 'docker run -d --name webapp -p 3000:3000 prabaseenu/webapp:latest'
            }
        }
    }
}
